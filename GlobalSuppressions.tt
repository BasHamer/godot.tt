<#@ template language="C#" hostSpecific="true" debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDte" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System" #>
<#
  var visualStudio = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
  var project = visualStudio.Solution.FindProjectItem(this.Host.TemplateFile).ContainingProject as EnvDTE.Project;

  string root = Host.ResolvePath("");
  var projectItems = GetProjectItemsRecursively(project.ProjectItems);
#>
// This file is used by Code Analysis to maintain SuppressMessage
// attributes that are applied to this project.
// Project-level suppressions either have no target or are given
// a specific target and scoped to a namespace, type, member, etc.

using System.Diagnostics.CodeAnalysis;
<# ListFiles("", projectItems); #>

<#+
	public void ListFiles(string path, List<string> projectItems)
	{
		var root = Host.ResolvePath("");
		
		var files = Directory.EnumerateFiles(root + path, "*.tscn", SearchOption.AllDirectories)
			.Select(f => f.Replace("\\", "/"))
			.Where(f => projectItems.Any(p => p.Equals(f.Replace("tscn","cs"), StringComparison.OrdinalIgnoreCase)))
			.Select(f => new { path= "res:/" + f.Substring(root.Length), file = new FileInfo(f)})
			.OrderBy(f => f.path)
			.ToList();

		foreach(var file in files)
		{
			WriteLine($"[assembly: SuppressMessage(\"Design\", \"CA1050:Declare types in namespaces\", Justification = \"Godot\", Scope = \"type\", Target = \"~T:{file.file.Name.Replace(".tscn","")}\")]");
		}
	}

	public List<string> GetProjectItemsRecursively(EnvDTE.ProjectItems items)
	{
		var ret = new List<string>();
		if (items == null) return ret;

		foreach(EnvDTE.ProjectItem item in items)
		{
			string result = item.FileNames[1].Replace("\\", "/");
			
			// If not folder.
			if (result[result.Length - 1] != '\\')
			{
				ret.Add(result);
			}
						
			ret.AddRange(GetProjectItemsRecursively(item.ProjectItems));
		}

		return ret;
	}
#>
